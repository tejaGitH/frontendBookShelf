heyy, lets dig into final stuff now , lets make some things clear , now for the project we need Dashboard should contain 4+1+1 componenents 4+Navbar+About 4 in 2 rows([My Progress(65),Search(35)],[Friends(20),SocialFriendUpdates(80)]) My Progress should contain {ongoing,finished}books3-3 in two sperate rows showing book title author, flexibility to fetch full lists upon clicking onGoing book, BookCard of the book should be displayed as seperate box/anythoing on UI with features to update reading progress, mark as finished button upon clicking mark as finished an option to add review and rating should be provided with an option to back to dashboard upon clicking Finished books , Bookcard should show the reviews rating of the book, if not given should have an option to add the review and ratin with option to go back and we will discuss about other components later also in the entire screen we have 6 componwents Nav bar in the right column, about in the bottom row, My progress in the first row with 65% row space occupancy, 35% first row we will implement search later,2nd row 20% friends, 80% Socila updates....In the NavBar right now lets have profile,Home which is DashBoard Itself, MyBooks,My Friends,BestSellers,SocialUpdates,About.........we will design all the components inside them later in the course,,,,, lets integrate every thing as per the code we have also we need to make it ina a proper folder structiure with css included.... lets start and finish it,,, are you with me on this




// import React, { useCallback, useEffect, useState } from 'react';
// import { useDispatch, useSelector } from 'react-redux';
// import { useNavigate } from 'react-router-dom';
// import { fetchCurrentBooks, fetchFinishedBooks, markBookAsFinished } from '../../../actions/bookActions';
// import ReviewModal from './ReviewModal';
// import '../../../styles/MyProgress.css';
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { faStar } from '@fortawesome/free-solid-svg-icons';

// const MyProgress = () => {
//     const dispatch = useDispatch();
//     const navigate = useNavigate();
//     const { currentlyReading, finishedBooks, loading, error } = useSelector((state) => state.books);
//     const [showModal, setShowModal] = useState(false);
//     const [selectedBookId, setSelectedBookId] = useState(null);

//     useEffect(() => {
//         if (!currentlyReading.length && !loading) {
//             dispatch(fetchCurrentBooks())
//                 .then((response) => {
//                     console.log('Fetched currently reading books:', response.payload);
//                 })
//                 .catch((error) => {
//                     console.error('Error fetching currently reading books:', error);
//                 });
//         }
//         if (!finishedBooks.length && !loading) {
//             dispatch(fetchFinishedBooks())
//                 .then((response) => {
//                     console.log('Fetched finished books:', response.payload);
//                 })
//                 .catch((error) => {
//                     console.error('Error fetching finished books:', error);
//                 });
//         }
//     }, [dispatch, currentlyReading.length, finishedBooks.length, loading]);

//     const handleMarkAsFinished = useCallback((bookId) => {
//         dispatch(markBookAsFinished(bookId))
//         .then(() => {
//             dispatch(fetchCurrentBooks());
//             dispatch(fetchFinishedBooks());
//         })
//         .catch((error) => {
//             console.error('Error marking as finished:', error);
//         });
//     }, [dispatch]);

//     const handleAddReview = (bookId) => {
//         setSelectedBookId(bookId);
//         setShowModal(true);
//     };

//     const closeModal = () => {
//         setShowModal(false);
//         setSelectedBookId(null);
//     };

//     const handleReviewSubmit = () => {
//         console.log('Review submitted');
//         closeModal();
//         dispatch(fetchFinishedBooks())
//             .then(() => {
//                 console.log('Finished books re-fetched');
//             })
//             .catch((error) => {
//                 console.error('Error re-fetching finished books:', error);
//             });
//     };

//     const truncateReview = (text, length = 100) => {
//         if (text.length <= length) return text;
//         return text.substring(0, length) + '...';
//     };

//     return (
//         <div className="my-progress">
//             <h2>My Progress</h2>
//             {loading && <p>Loading...</p>}
//             {error && <p>Error: {error}</p>}
//             <div className="ongoing-books">
//                 <h3>Ongoing Books <a href="/all-ongoing-books" className="view-more">View more</a></h3>
//                 <div className="book-list-row">
//                     {currentlyReading.map((book) => (
//                         <div key={book._id} className="book-card single-row">
//                             <div className="book-title" style={{ flex: '25%' }}>
//                                 <p><strong>{book.title}</strong></p>
//                             </div>
//                             <div className="book-author" style={{ flex: '15%' }}>
//                                 <p>by {book.author}</p>
//                             </div>
//                             <div className="book-progress" style={{ flex: '52%' }}>
//                                 <p>Progress: {book.progress}%</p>
//                             </div>
//                             <div className="book-actions" style={{ flex: '8%' }}>
//                                 <button onClick={() => handleMarkAsFinished(book._id)} className="mark-finished-button">
//                                     Mark as Finished
//                                 </button>
//                             </div>
//                         </div>
//                     ))}
//                 </div>
//             </div>
//             <div className="finished-books">
//                 <h3>Finished Books <a href="/all-finished-books" className="view-more">View more</a></h3>
//                 <div className="book-list-row">
//                     {finishedBooks.map((book) => (
//                         <div key={book._id} className="book-card single-row">
//                             <div className="book-title" style={{ flex: '25%' }}>
//                                 <p><strong>{book.title}</strong></p>
//                             </div>
//                             <div className="book-author" style={{ flex: '15%' }}>
//                                 <p>by {book.author}</p>
//                             </div>
//                             <div className="book-review" style={{ flex: '52%' }}>
//                                 {book.reviews && book.reviews.length > 0 ? (
//                                     book.reviews.map((review) => (
//                                         <p key={review._id} className="review-text">{truncateReview(review.review)} <a href="#" className="read-more">Read more</a></p>
//                                     ))
//                                 ) : (
//                                     <button className="add-review-link" onClick={() => handleAddReview(book._id)}>
//                                         Add Review
//                                     </button>
//                                 )}
//                             </div>
//                             <div className="book-rating" style={{ flex: '8%' }}>
//                                 {book.reviews && book.reviews.length > 0 && book.reviews.map((review) => (
//                                     <div key={review._id} className="rating">
//                                         {[...Array(5)].map((star, index) => (
//                                             <FontAwesomeIcon
//                                                 key={index}
//                                                 icon={faStar}
//                                                 className={index < review.rating ? 'star filled' : 'star'}
//                                             />
//                                         ))}
//                                     </div>
//                                 ))}
//                             </div>
//                         </div>
//                     ))}
//                 </div>
//             </div>
//             {showModal && <ReviewModal bookId={selectedBookId} closeModal={closeModal} onSubmit={handleReviewSubmit} />}
//         </div>
//     );
// };
